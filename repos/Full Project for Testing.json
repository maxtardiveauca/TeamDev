{
  "{d}test": {
    "{d}connections": {
      "{f}ReadMe.md": "This folder contains definitions for connections",
      "{f}MQTTConn.json": {
        "name": "MQTTConn",
        "isActive": true,
        "description": "comments",
        "providerName": "MQTT",
        "parameters": {
          "broker": {
            "value": "tcp://localhost",
            "comments": null
          },
          "clientId": {
            "value": "RANDOM",
            "comments": null
          },
          "automaticReconnect": {
            "value": "true",
            "comments": null
          },
          "keepAliveInterval": {
            "value": "0",
            "comments": null
          }
        }
      },
      "{f}MQTTConn.js": null
    },
    "{d}listeners": {
      "{f}ReadMe.md": "This folder contains definitions for listeners",
      "{f}MQTTListener.json": {
        "name": "MQTTListener",
        "isActive": true,
        "loggingLevel": "Fine",
        "description": null,
        "connectionName": "MQTTConn",
        "providerName": "MQTT",
        "parameters": {
          "topic_name": {
            "value": "test",
            "description": null
          }
        }
      },
      "{f}MQTTListener.js": "// Getting the string equivalent of the message.\nvar messageContent = message.toString();\n// Create the payload\nvar messageAudit = {};\nvar date  = new Date();\nmessageAudit.date = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + ' ' +  date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\nmessageAudit.message = messageContent;\n// Insert the payload into the audit table\nvar resourceURL = 'http://localhost:8080/APIServer/rest/default/demo_mysql/v1/demo:message_audit';\nvar parms = {};\nvar settings = { 'headers': {'Authorization' : 'CALiveAPICreator demo_full:1'}};\nvar postResponse = listenerUtil.restPost(resourceURL, parms, settings, messageAudit);\nlog.debug(postResponse);\nlog.debug('Logged '+messageAudit+' into message_audit table.');\n// Listener code goes here or check out examples ( see top right dropdown menu ) \n",
      "{f}START.json": {
        "name": "START",
        "isActive": false,
        "loggingLevel": "Warning",
        "description": null,
        "connectionName": null,
        "providerName": "Startup",
        "parameters": null
      },
      "{f}START.js": "// This is only a very generic example\nvar json = listenerUtil.restPost(\n  'https://consul.rocks/v1/agent/members',\n  {},\n  {headers:\n    {\"X-Consul-Token\": \"abcd1234\"}\n  },\n  {name: listenerUtil.getHostName()}\n)\n"
    },
    "{d}custom_endpoints": {
      "{f}ReadMe.md": "This folder contains definitions for custom_endpoints",
      "{f}New$0020custom$0020endpoint$00201.json": {
        "name": "New custom endpoint 1",
        "isActive": true,
        "description": null,
        "requiresAuthentication": false,
        "urlPattern": ".test",
        "appliesTo": {
          "get": true,
          "put": false,
          "post": false,
          "delete": false
        }
      },
      "{f}New$0020custom$0020endpoint$00201.js": "var res = {result: 'Hello wolrd'};\nreturn JSON.stringify(res);\n",
      "{f}New$0020custom$0020endpoint$00202.json": {
        "name": "New custom endpoint 2",
        "isActive": true,
        "description": "comment",
        "requiresAuthentication": true,
        "urlPattern": ".test2",
        "appliesTo": {
          "get": true,
          "put": true,
          "post": true,
          "delete": true
        }
      },
      "{f}New$0020custom$0020endpoint$00202.js": "var res = {result: 'Hello World'};\nreturn JSON.stringify(res);\n"
    },
    "{f}relationships.json": [
      {
        "parentEntity": "demo:customer",
        "childEntity": "demo:PurchaseOrder",
        "roleToParent": "customer",
        "roleToChild": "PurchaseOrderList",
        "deleteRule": "Cascade",
        "updateRule": "No Action",
        "parentColumns": [
          "name"
        ],
        "childColumns": [
          "customer_name"
        ]
      },
      {
        "parentEntity": "demo:customer",
        "childEntity": "finance:orders",
        "roleToParent": "demoCustomer",
        "roleToChild": "financeOrders",
        "deleteRule": "No Action",
        "updateRule": "No Action",
        "parentColumns": [
          "name"
        ],
        "childColumns": [
          "customer_name"
        ]
      },
      {
        "parentEntity": "demo:employee",
        "childEntity": "demo:employee_picture",
        "roleToParent": "employee_picture",
        "roleToChild": "employee_pictureList",
        "deleteRule": "Cascade",
        "updateRule": "No Action",
        "parentColumns": [
          "employee_id"
        ],
        "childColumns": [
          "employee_id"
        ]
      },
      {
        "parentEntity": "demo:employee",
        "childEntity": "demo:PurchaseOrder",
        "roleToParent": "salesrep",
        "roleToChild": "PurchaseOrderList",
        "deleteRule": "Cascade",
        "updateRule": "No Action",
        "parentColumns": [
          "employee_id"
        ],
        "childColumns": [
          "salesrep_id"
        ]
      },
      {
        "parentEntity": "demo:product",
        "childEntity": "demo:LineItem",
        "roleToParent": "product",
        "roleToChild": "LineItemList",
        "deleteRule": "No Action",
        "updateRule": "No Action",
        "parentColumns": [
          "product_number"
        ],
        "childColumns": [
          "product_number"
        ]
      },
      {
        "parentEntity": "demo:PurchaseOrder",
        "childEntity": "demo:LineItem",
        "roleToParent": "lineitem_purchaseorder",
        "roleToChild": "LineItemList",
        "deleteRule": "Cascade",
        "updateRule": "No Action",
        "parentColumns": [
          "order_number"
        ],
        "childColumns": [
          "order_number"
        ]
      },
      {
        "parentEntity": "demo:PurchaseOrder",
        "childEntity": "demo:purchaseorder_audit",
        "roleToParent": "purchaseorder_audit",
        "roleToChild": "purchaseorder_auditList",
        "deleteRule": "Cascade",
        "updateRule": "No Action",
        "parentColumns": [
          "order_number"
        ],
        "childColumns": [
          "order_number"
        ]
      }
    ],
    "{d}data_sources": {
      "{f}ReadMe.md": "This folder contains definitions for data sources",
      "{f}demo_derby.json": {
        "name": "demo_derby",
        "prefix": "demo",
        "title": "Demo",
        "databaseType": "DERBY",
        "comments": null,
        "isActive": true,
        "isLogErrors": false,
        "isSchemaEditable": false,
        "isSupportBoolean": false,
        "isReadOnly": false,
        "useJNDIDataSource": false,
        "url": "jdbc:derby:directory:/Users/banty01/derbytest/Demo",
        "catalog": null,
        "schema": "DEMO",
        "username": "DEMO",
        "maximumConnections": 20,
        "tableExcludes": null,
        "tableIncludes": null,
        "procedureExcludes": null,
        "procedureIncludes": null,
        "nonPersistentAttributes": {
        },
        "tableInfos": {
        },
        "viewInfos": {
        }
      },
      "{f}finance_wdv.json": {
        "name": "finance_wdv",
        "prefix": "finance",
        "title": "Finance",
        "databaseType": "DERBY",
        "comments": null,
        "isActive": true,
        "isLogErrors": false,
        "isSchemaEditable": false,
        "isSupportBoolean": false,
        "isReadOnly": false,
        "useJNDIDataSource": false,
        "url": "jdbc:derby:directory:/Users/banty01/derbytest/Finance",
        "catalog": null,
        "schema": "\"FINANCE\"",
        "username": "\"FINANCE\"",
        "maximumConnections": 20,
        "tableExcludes": null,
        "tableIncludes": null,
        "procedureExcludes": null,
        "procedureIncludes": null,
        "nonPersistentAttributes": {
          "orders": {
            "NPADec": {
              "dataType": "npa_decimal",
              "comments": null
            },
            "NPAInt": {
              "dataType": "npa_integer",
              "comments": null
            },
            "NPAString": {
              "dataType": "npa_varchar",
              "comments": null
            }
          }
        },
        "tableInfos": {
        },
        "viewInfos": {
        }
      }
    },
    "{d}filters": {
      "{f}ReadMe.md": "This folder contains definitions for filters",
      "{f}UserFilter.json": {
        "name": "UserFilter",
        "description": "description",
        "isRestricted": true,
        "appliesTo": [
          "cusomter"
        ]
      },
      "{f}UserFilter.sql": "custbal > 0"
    },
    "{d}functions": {
      "{f}ReadMe.md": "This folder contains definitions for functions",
      "{f}apiLevelCust.json": {
        "name": "apiLevelCust",
        "isActive": true,
        "comments": "This is a skeleton function, you should most likely:\n1 - Give it a proper name (the default is a randomly generated 5-letter name)\n2 - Give it a proper comment\n3 - Change the code to do something useful",
        "returnType": "{\n  \"description\": \"This is an example of the type of data returned by this function\"\n}\n",
        "parameters": null,
        "functionType": "rowLevel",
        "appliesTo": [
          "customer"
        ]
      },
      "{f}apiLevelCust.js": "// Insert your code here\nreturn {result: 'Hello'};\n",
      "{f}testFunction.json": {
        "name": "testFunction",
        "isActive": true,
        "comments": "This is a skeleton function, you should most likely:\n1 - Give it a proper name (the default is a randomly generated 5-letter name)\n2 - Give it a proper comment\n3 - Change the code to do something useful",
        "returnType": "{\n  \"description\": \"This is an example of the type of data returned by this function\"\n}\n",
        "parameters": {
          "parmStr": {
            "parameterType": "string",
            "isRequired": false,
            "comments": "Enter description here"
          },
          "parmNum": {
            "parameterType": "number",
            "isRequired": false,
            "comments": "Enter description here"
          },
          "parmBool": {
            "parameterType": "boolean",
            "isRequired": false,
            "comments": "Enter description here"
          }
        },
        "functionType": "apiLevel"
      },
      "{f}testFunction.js": "// Insert your code here\nreturn {result: 'Hello'};\n"
    },
    "{d}libraries": {
      "{f}ReadMe.md": "This folder contains definitions for libraries and whether they are used.\n",
      "{f}SystemLibraryUsage.json": [
        "Numeral.js"
      ],
      "{f}AdmAuth-1.0.json": {
        "name": "AdmAuth",
        "version": "1.0",
        "isUsedByProject": true,
        "title": "AdminAuthProvider",
        "description": "This is a library",
        "groupName": "newlib",
        "docsURL": "",
        "referenceURL": ""
      },
      "{f}AdmAuth-1.0.js": "// Custom authentication provider, for admin user authentication (access to API Creator).\n// Authenticates hard coded users; in real-life, you might authenticate against LDAP, AD, etc.\n\n// At its core, an Authorization Provider is a JavaScript (create) function\n// that returns an object (see end) containing these 4 functions:\n//   configure: function(values) {...},\n// authenticate(payload) {...},\n// getConfigInfo: function() {...},\n// getLoginInfo: function() {...}\n\n\nout = java.lang.System.out;\n\n// register this create function to LAC.\n// as above, it returns an object containing the 4 functions noted above.\nfunction create() {\n\n    var result = {};  // returned to LAC, containing the 4 functions noted above\n    var configSetup = {\n        keyLifetimeMinutes : 60\n    };\n    var allRoles = ['System administrator', 'Account admin', 'Data admin', 'Data designer'];\n\n\n    // This function is called by API Creator when the user enters a value\n    // for the parameters specified by getConfigInfo and clicks Save.\n    // Returns configuration values which API Creator will save into Admin DB;\n    // these are exported in the json config file\n    result.configure = function configure(myConfig) {\n        configSetup.keyLifetimeMinutes = myConfig.keyLifetimeMinutes || 60;\n    };\n\n\n    // Main crux of Auth Provider - called by API Server on post to @authenticate, to return list of Roles\n    // NOTE: the function configure must be called first - this will validate the user/pw\n\n    // Eg, you might with to query LDAP, Active Directory etc, to empower corporate users\n    // to use Live API Creator to create database.\n    // You will also need to compute the proper admin roles explained in the product documentation\n    // under Admin Authentication Providers\n\n    // The argument passed in will contain whatever values were provided to the @authentication service.\n    // If the caller is well-behaved, this should correspond to the parameters described by getLoginInfo,\n    // but you should not depend on that.\n\n    // This function must return an object containing just an error message if the authentication failed.\n    // If the authentication succeeded, then it must return an object with the following properties:\n    result.authenticate = function authenticate(payload) {\n\n        out.println(\"Admin Authentication called...\");\n\n        var roles = [];\n        var errorMsg = \"Sorry, you are not authorized\";\n        var resetPasswordURL = null;\n        var forgotPasswordURL = null;\n        var myUserData = [];\n        var autResponse = errorMsg;\n\n        // these hard-coded users are in lieu of actually doing a query against LDAP, AD etc.\n        if (payload.username == 'admin' || payload.username == 'demo' || payload.username == 'sa' || payload.username == 'boris') {\n            out.println(\"Admin Authentication - default admin/demo/sa user - good to go..\");\n            roles = allRoles; // || HARD CODED FOR DEMO (we even ignore the pwd)\n            myUserData = {accountIdent:'1000'};\n            if (payload.username == 'demo') {\n                myUserData = {accountIdent:'1'};\n                out.println(\"... with SA account visibility..\");\n            }\n            autResponse = {\n                errorMessage : null,\n                roleNames : roles,\n                userIdentifier : payload.username,\n                keyExpiration : new Date(+new Date()\n                        + (+configSetup.keyLifetimeMinutes) * 60 * 1000),\n                userData : myUserData,\n                userInfo : myUserData,\n                lastLogin : {\n                    datetime : null,\n                    ipAddress : null\n                }\n            };\n            out.println(\"Admin Authentication successful - returning..\" + JSON.stringify(autResponse));\n            return autResponse;\n        } else {\n            out.println(\"Admin Authentication FAILED!\");\n            return {\n                errorMessage : errorMsg,\n                roleNames : roles,\n                userIdentifier : payload.username,\n                keyExpiration : new Date(+new Date()\n                        + (+configSetup.keyLifetimeMinutes) * 60 * 1000),\n                userData : myUserData,\n                userInfo : myUserData,\n                lastLogin : {\n                    datetime : null,\n                    ipAddress : null\n                }\n            };\n        }\n    };\n\n\n    // FUNCTION getLoginInfo is used to create the login dialog - DO NOT CHANGE\n    // This function is called by API Server when a client needs to know what kind of information is required for authentication.\n    // Basically, this describes what the login dialog should look like (assuming the client is an interactive application).\n    result.getLoginInfo = function getLoginInfo() {\n        return {\n            fields : [\n                    {\n                        name : \"username\",\n                        display : \"Username\",\n                        description : \"Enter your First Name\",\n                        type : \"text\",\n                        length : 40,\n                        helpURL : \"http://liveapicreator.ca.com\"\n                    },\n                    {\n                        name : \"password\",\n                        display : \"Password\",\n                        description : \"Enter your Last Name as Password\",\n                        type : \"password\",\n                        length : 40,\n                        helpURL : \"http://liveapicreator.ca.com/\"\n                    } ],\n            links : [\n            ]\n        };\n    };\n\n    result.getConfigInfo = function getConfigInfo() {\n        return {\n            current : {\n                \"keyLifetimeMinutes\" : configSetup.keyLifetimeMinutes\n            },\n            fields : [\n                {\n                name : \"keyLifetimeMinutes\",\n                display : \"API Key Lifetime (Minutes)\",\n                type : \"number\",\n                length : 8,\n                helpURL : \"http://www.liveapicreator.ca.com\"\n            } ],\n            links : []\n        };\n    }\n\n    // returns object containing the 4 functions that define a Custom Authentication Provider:\n    //   getConfigInfo: function() {...},  configure: function(values) {...}, getLoginInfo: function() {...}, authenticate:\n\n    // returns the 4 functions\n    return result;\n}\n",
      "{f}b2bB2B-1.0.json": {
        "name": "b2bB2B",
        "version": "1.0",
        "isUsedByProject": true,
        "title": "B2BLib",
        "description": "This is a library",
        "groupName": "newlib",
        "docsURL": "",
        "referenceURL": ""
      },
      "{f}b2bB2B-1.0.js": "var B2B = {};  // a common JavaScript technique to name-scope shared functions\n//TODO: employ arrow functions when fully supported by Nashorn\n\nB2B.transformToWebHook = function transformToWebHook(aLogicContext, aResourceName, aTargetUrl) {\n    aLogicContext.logDebug(\"*** B2B.transformToWebHook *** using: \" + aResourceName + \", to: \" + aTargetUrl);\n    var resourceURL = aTargetUrl; // \"http://localhost:8080/rest/default/b2bderbypavlov/v1/SalesReports\";\n\n    // custom resource provides name mapping\n    // readiness lab: uncomment this  =====>\n    // aLogicContext.logDebug(\"getting aLogicContext.getTableDefinition()\");\n    var metaTable = aLogicContext.getTableDefinition();\n    aLogicContext.logDebug(\"*** transformToWebHook ***  metaTable: \" + metaTable);\n    var options = {sysfilter: \"equal(OrderID:\" + aLogicContext.getCurrentState().OrderID + \")\"\n            ,\"sysfilter..SupplierAlert.Order_DetailsList.Product.Supplier\": \"equal(CompanyName: '\" + \"Pavlova, Ltd.\" + \"')\" };\n    var resourceGetResponse = SysUtility.getResource(aResourceName, options);  // FIXME\n\n    // system console output\n    aLogicContext.logDebug(\"B2B.transformToWebHook posting getResponse: \" + JSON.stringify(resourceGetResponse).substring(1, 20) + \"...\");\n    aLogicContext.logDebug(\"B2B.transformToWebHook to URL: \" + resourceURL);\n\n    if (resourceURL === null || resourceURL === \"\") {\n        out = java.lang.System.out;\n        out.println(\"WebHook URL is null/empty - this not posted:\\n\" + (JSON.stringify(resourceGetResponse)).substring(1, 4) + \"...\");\n    }\n    else {\n        var settings = { headers: { Authorization: \"CALiveAPICreator supplier:1\" }};  // FIXME\n        var postResponse = SysUtility.restPost(resourceURL, null, settings, resourceGetResponse);\n\n        // API Creator log output\n        // log.debug('ok, using re-usable solution');\n        if (JSON.parse(postResponse).statusCode !== 201) {\n            throw \"B2B.transformToWebHook unexpected post response: \" + postResponse;\n        }\n    }\n\n    return null;\n};\n\n\nB2B.sendToWebHook = function sendToWebHook(aPostRequest, aTargetUrl) {\n    resourceURL = aTargetUrl;\n    var tryIt = true;\n    if (tryIt === true) {\n        if (resourceURL === null || resourceURL === \"\") {\n            out = java.lang.System.out;\n            out.println(\"WebHook URL is null/empty - this not posted:\\n\" + (JSON.stringify(aPostRequest)).substring(1, 20) + \"...\");\n        }\n        else {\n            var settings = { headers: { Authorization: \"CALiveAPICreator supplier:1\" }};  // FIXME\n            var postResponse = SysUtility.restPost(resourceURL, null, settings, aPostRequest);\n\n            // API Creator log output\n            // log.debug('ok, using re-usable solution');\n            if (JSON.parse(postResponse).statusCode !== 201) {\n                throw \"B2B.sendToWebHook unexpected post response: \" + postResponse;\n            }\n        }\n    }\n    return null;\n};\n\n\n// you can save state in logicContext.userProperties, including complex objects such as Maps\n\nB2B.putPropertyMap = function putPropertyMap(logicContext, propertyName, key, value) {\n    var RestRequest = Java.type('com.kahuna.server.rest.RestRequest');\n    var req = RestRequest.getCurrentRestRequest();\n    logicContext.logDebug(\"*** B2B.putPropertyMap - propertyName: \" + propertyName + \", key: \" + key + \", value: \" + value + \", on req: \" + req);\n    var property = req.getUserProperties().get(propertyName);   // userProperties to maintain state in transaction\n    if (property === null) {\n        property = new java.util.HashMap();\n    }\n    property.put(key, value);\n    req.setUserProperty(propertyName, property);\n};\n\n\n//approach for global (static) properties (dynamic properties can be saved in req.getUserProperties().get)\n//(alternative: store them in a 1 row table, edit with Data Explorer, accessors here)\n\nB2B.supplierURL = function supplierURL(req) {\n    var resultURL = req.localFullBaseURL.replace(\"nw\",\"pavlov\");\n    out.println(\"B2B.supplierURL returns: \" + resultURL);\n    return resultURL;\n};\n\n\n//returns a sample order, for testing\n\nB2B.sampleOrder = function sampleOrder() {\n    var newPartnerOrderJson =\n    {\n        \"CustomerNumber\": \"VINET\",\n        \"Items\": [\n            {\n            \"Product\": {\n                \"ProductName\": \"Pavlova\"\n            },\n            \"Quantity\": 1\n            }, {\n                \"Product\": {\n                    \"ProductName\": \"Uncle Bob's Organic Dried Pears\"\n                },\n                \"Quantity\": 2\n            }, {\n                \"Product\": {\n                    \"ProductName\": \"Tofu\"\n                },\n                \"Quantity\": 3\n            }, {\n                \"Product\": {\n                    \"ProductName\": \"Ikura\"\n                },\n                \"Quantity\": 4\n            }, {\n                \"Product\": {\n                    \"ProductName\": \"Konbu\"\n                },\n                \"Quantity\": 5\n            }, {\n                \"Product\": {\n                    \"ProductName\": \"Alice Mutton\"\n                },\n                \"Quantity\": 1\n            }\n        ],\n        \"Shipper\": {\n            \"CompanyName\": \"Federal Shipping\"\n        }\n    };\n\n    return newPartnerOrderJson;\n};\n\n\n// send email\n\nB2B.sendEmail = function sendEmail() {\n    var result = {};\n    var msg = \"error\";\n    var configSetup = {\n        to: \"to\",\n        from: \"from\",\n        title: \"title\",\n        text: \"text\"\n    };\n\n    result.configure = function configure(myconfig) {\n        configSetup.to = myconfig.to || \"to\";\n        configSetup.from = myconfig.from || \"from\";\n        configSetup.title = myconfig.title || \"title\";\n        configSetup.text = myconfig.text || \"text\";\n    };\n\n    result.send = function send() {\n        try {\n            // call my mail interface here\n            msg = \"Send email (stub) title: \" + configSetup.title + \" to: \" + configSetup.to + \", from: \" + configSetup.from + \" body text: \" + configSetup.text;\n        }\n        catch (e) {\n            return e;\n        }\n        out.println(\"B2B.sendMail returns: \" + msg);\n        return msg;\n    };\n\n    return result;\n}\n\n\n// minor debug helper, to prevent NPE in logging anObject.toString\n// where anObject is null\n\nB2B.db = function db(anObject) {\n    var result = \"null\";\n    if (anObject !== null) {\n        result = anObject.toString();\n    }\n    return result;\n};\n\n\n// copies like-named attributes from logicContext's row -> targetRow,\n// ignoring attributes part of pKey\n\nB2B.copyAttributes = function copyAttributes(logicContext, targetRow) {\n\n    sourceRow = logicContext.getCurrentState();\n\n    var sourceMetaEntity = sourceRow.getMetaEntity();\n    var targetMetaEntity = targetRow.getMetaEntity();\n\n    logicContext.touch(targetRow);\n    var debugMoved = [];\n\n    for each (var eachProp in sourceMetaEntity.getProperties()) {\n      if ( eachProp.isAttribute() ) {\n        var targetMetaProp = targetMetaEntity.getPropertyByName(eachProp.name);\n        // NB: cannot use hasOwnProperty (Java obj, not JS)\n        if (null !== targetMetaProp) {\n            if (targetMetaProp.isInPrimaryKey() === true) {\n                // logicContext.logDebug(\"copyAttributes -  skipping eachProp since in pKey: \" + eachProp.name);\n            }\n            else {\n                var propValue = sourceRow[eachProp.name];\n                targetRow[eachProp.name] = propValue;\n                debugMoved.push(eachProp.name);\n            }\n        }\n        else {\n            // logicContext.logDebug(\"copyAttributes - skipping eachProp since not in target: \" + eachProp.name);\n        }\n      }\n    }\n    logicContext.logDebug(\"copyAttributes - moved: [\" + debugMoved + \"]\");\n    logicContext.update(targetRow);\n};\n",
      "{f}CustomAuth-1.0.json": {
        "name": "CustomAuth",
        "version": "1.0",
        "isUsedByProject": true,
        "title": "B2BAuthProvider",
        "description": "This is a library",
        "groupName": "newlib",
        "docsURL": "",
        "referenceURL": ""
      },
      "{f}CustomAuth-1.0.js": "// Custom authentication provider, uploaded in B2B install script.\n// Authenticates using RESTful service, configured to be employees table in Northwind-B2B.\n\n// At its core, an Authorization Provider is a JavaScript function that returns an object (see end) containing these 4 functions:\n//   getConfigInfo: function() {...},  configure: function(values) {...}, getLoginInfo: function() {...}, authenticate:\n\n\nout = java.lang.System.out;\n\nfunction create() {\n\n    var result = {};\n    var configSetup = {\n        logonApiKey : '',\n        loginBaseURL : '',\n        loginGroupURL : '',\n        keyLifetimeMinutes : 60\n    };\n\n\n    // This function is called by API Creator when the user enters a value\n    // for the parameters specified by getConfigInfo and clicks Save.\n    // Returns configuration values which API Creator will save into Admin DB;\n    // these are exported in the json config file\n    result.configure = function configure(myConfig) {\n        configSetup.logonApiKey = myConfig.logonApiKey || 'demo_full';  // supply, or default\n        configSetup.loginBaseURL = myConfig.loginBaseURL || 'http://localhost:8080/rest/default/v1/...';\n        configSetup.loginGroupURL = myConfig.loginGroupURL || 'http://localhost:8080/rest/default/v1/...';\n        configSetup.keyLifetimeMinutes = myConfig.keyLifetimeMinutes || 60;\n    };\n\n\n    // Main crux of Auth Provider - called by API Server on post to @authenticate, to return list of Roles\n    // NOTE: the function configure must be called first - this will validate the user/pw\n\n    // The argument passed in will contain whatever values were provided to the @authentication service.\n    // If the caller is well-behaved, this should correspond to the parameters described by getLoginInfo,\n    // but you should not depend on that.\n\n    // This function must return an object containing just an error message if the authentication failed.\n    // If the authentication succeeded, then it must return an object with the following properties:\n    result.authenticate = function authenticate(payload) {\n\n        out.println(\"Authentication called...\");\n\n        var roles = [];\n        var errorMsg = null;\n        var resetPasswordURL = null;\n        var forgotPasswordURL = null;\n        var myUserData = [];\n        var params = null;\n        var settings = {\n            headers : {\n                'Authorization' : 'CALiveAPICreator ' + configSetup.logonApiKey + ':1'\n            }\n        };\n\n        try {\n            if (payload.username == 'admin' || payload.username == 'demo') {\n                out.println(\"Authentication - default admin/demo/ user - good to go..\");\n                // out.println(\"Lab test OK...\");  // uncomment this for Readiness Lab\n                roles = ['Full access']; // || HARD CODED FOR DEMO (we even ignore the pwd)\n                errorMsg = null; // authorized successfully\n            }\n            else if (payload.username == 'pavlov' ||  payload.username == 'Pavlov') {\n                out.println(\"Authentication - Pavlov - role is Supplier, with Global ID===7\");\n                roles = ['Supplier']; // Permission's Row Filter uses the following Global\n                myUserData = {ID: '7', AnotherParm: 'like this'};  //  reference like this: \"SupplierID\" = @{ID}\n                errorMsg = null; // authorized successfully\n            }\n            else {\n                // GET this JSON request to determine if username and password is valid\n                // if so, return an array of role names (here just 'Full Access')\n                // and, to simplify typing in demos, will allow the default Password1\n                var pwd = payload.password;\n                if (payload.username == \"Janet\" && payload.password == \"Password1\") {\n                    pwd = \"Leverling\";\n                }\n                var loginAttemptURL = configSetup.loginBaseURL\n                    + \"?sysfilter=equal(FirstName:'\"+ payload.username\n                    + \"')&sysfilter=equal(LastName:'\" + pwd\n                    + \"')\";\n                out.println(\"Authentication - finding [\" + payload.username + \".\" + pwd + \"]\");\n                out.println(\"... via Rest URL: \" + loginAttemptURL);\n                out.println(\"... using settings: \" + JSON.stringify(settings));\n                var loginAttempt = SysUtility.restGet(loginAttemptURL, params, settings);\n                var groups = JSON.parse(loginAttempt);\n                // out.println(JSON.stringify(groups, null, 2));\n\n                if (groups.hasOwnProperty('errorMessage')) {\n                    out.println(\"...errorMessage found in loginAttempt: \" + loginAttempt);\n                    errorMsg = groups.errorMessage;\n                }\n                else {\n                    // change the field name below .name to the name of your\n                    // roleName column\n                    errorMsg = 'Username ' + payload.username + ' not found with last name as password';\n                    for ( var row in groups) {\n                        roles = ['Full access']; // || HARD CODED FOR DEMO\n                        // roles.push(groups[row].Region);\n                        // myUserData.push(groups[row].Region)\n                        errorMsg = null; // if one role is found then we are good to return\n                    }\n                }\n                if (errorMsg != null) {\n                    out.println(\"...get failed to find this user, loginAttempt: \" + loginAttempt);\n                }\n            }\n        }\n        catch (e) {\n            errorMsg = e.message;\n        }\n\n        var autResponse = {\n            errorMessage : errorMsg,\n            roleNames : roles,\n            userIdentifier : payload.username,\n            keyExpiration : new Date(+new Date()\n                    + (+configSetup.keyLifetimeMinutes) * 60 * 1000),\n            userData : myUserData,\n            lastLogin : {\n                datetime : null,\n                ipAddress : null\n            }\n        };\n        return autResponse;\n    };\n\n\n    // FUNCTION getAllGroups is used to map all available groups for existing application -\n    // unused in this example, provided for illustration purposes only...\n    result.getAllGroups = function getAllGroups() {\n        var roles = [];\n        var errorMsg = null;\n        var params = null;\n        var settings = {\n            headers : {\n                'Authorization' : 'CALiveAPICreator ' + configSetup.logonApiKey + ':1'\n            }\n        };\n\n        try {\n            var loginAttemptURL = configSetup.loginGroupURL; // no filter needed- get all roles?\n            var groupsResponse = SysUtility.restGet(loginAttemptURL, params,\n                    settings);\n            var groups = JSON.parse(groupsResponse);\n            if (groups.hasOwnProperty('errorMessage')) {\n                errorMsg = groups.errorMessage;\n            }\n            else {\n                // change the .name to refrelect the name of your roles returned\n                // in the JSON object\n                for ( var row in groups) {\n                    roles.push(groups[row].name);\n                }\n            }\n        }\n        catch (e) {\n            errorMsg = e.message;\n        }\n\n        var autResponse = {\n            errorMessage : errorMsg,\n            roleNames : roles\n        };\n\n        return autResponse;\n    };\n\n\n    // FUNCTION getLoginInfo is used to create the login dialog - DO NOT CHANGE\n    // This function is called by API Server when a client needs to know what kind of information is required for authentication.\n    // Basically, this describes what the login dialog should look like (assuming the client is an interactive application).\n    result.getLoginInfo = function getLoginInfo() {\n        return {\n            fields : [\n                    {\n                        name : \"username\",\n                        display : \"Username\",\n                        description : \"Enter your First Name\",\n                        type : \"text\",\n                        length : 40,\n                        helpURL : \"http://liveapicreator.ca.com\"\n                    },\n                    {\n                        name : \"password\",\n                        display : \"Password\",\n                        description : \"Enter your Last Name as Password\",\n                        type : \"password\",\n                        length : 40,\n                        helpURL : \"http://liveapicreator.ca.com/\"\n                    } ],\n            links : [\n\n            ]\n        };\n    };\n\n    result.getConfigInfo = function getConfigInfo() {\n        return {\n            current : {\n                \"keyLifetimeMinutes\" : configSetup.keyLifetimeMinutes,\n                \"logonApiKey\" :        configSetup.logonApiKey,\n                \"loginBaseURL\" :       configSetup.loginBaseURL,\n                \"loginGroupURL\" :      configSetup.loginGroupURL\n            },\n            fields : [ {\n                name : \"logonApiKey\",\n                display : \"logonApiKey\",\n                type : \"text\",\n                length : 60,\n                helpURL : \"\"\n            }, {\n                name : \"loginBaseURL\",\n                display : \"loginBaseURL\",\n                type : \"text\",\n                length : 120,\n                helpURL : \"\"\n            }, {\n                name : \"loginGroupURL\",\n                display : \"loginGroupURL\",\n                type : \"text\",\n                length : 120,\n                helpURL : \"\"\n            }, {\n                name : \"keyLifetimeMinutes\",\n                display : \"API Key Lifetime (Minutes)\",\n                type : \"number\",\n                length : 8,\n                helpURL : \"http://www.liveapicreator.ca.com\"\n            } ],\n            links : []\n        };\n    };\n\n    // returns object containing the 4 functions that define a Custom Authentication Provider:\n    //   getConfigInfo: function() {...},  configure: function(values) {...}, getLoginInfo: function() {...}, authenticate:\n\n    return result;  // returns the 4 func\n}\n",
      "{f}insertActions-1.0.json": {
        "name": "insertActions",
        "version": "1.0",
        "isUsedByProject": false,
        "title": "InsertActionsLib",
        "description": "This is a library",
        "groupName": "newlib",
        "docsURL": "",
        "referenceURL": ""
      },
      "{f}insertActions-1.0.js": "var insertActions = {};  // a common JavaScript technique to name-scope shared functions\n\n\n// internal routine to fix path expression from jsonPath (another library)\n\nvar fixPathObject = function fixPathObject(path,jsonObj) {\n    var index = path;//'[\\'Items\\'][0][\\'Product\\']';\n    var res = index.split(\"]\");\n    res.splice(res.length-1,1);\n    var target = jsonObj;\n    for (var i = 0; i < res.length; i++) {\n        var replacement = res[i].replace(\"[\",\"\").replace(\"'\",\"\").replace(\"'\",\"\");\n        target = target[replacement];\n    }\n    return target;\n};\n\n\n// internal routine to create metadata tag\n\nvar getMetadataTag = function getMetadataTag(anAction) {\n    var result = null;\n    if (anAction === \"LOOKUP\") {\n        result = { \"action\": \"LOOKUP\" };\n    }\n    else if (anAction === \"MERGE_INSERT\") {\n        result = { \"action\": \"MERGE_INSERT\" };\n    }\n    else {\n        throw \"insertAction tag must be LOOKUP or MERGE_INSERT\";\n    }\n    return result;\n};\n\n\n// internal routine to insert the tag (iff it does not already exist)\n\nvar insertActionTag = function insertActionTag(aTarget, aTag) {\n    if (typeof aTarget[\"@metadata\"] !== \"undefined\") {\n        // log.debug(dbTitle + \" *** metadata tag already exists, no action taken\");\n    }\n    else {\n        aTarget[\"@metadata\"] = getMetadataTag(aTag);\n    }\n};\n\n\n// insert metadata action tags into json string, (e.g., LOOKUP) iff they don't already exist\n// actions array is {resource-name, path-for-insert, \"INSERT\" || \"MERGE_INSERT\"}\n// returns json string of altered request\n// example from B2B:\n//    var actions = [\n//      {resource: \"PartnerOrder\", path: \"$..Product\", insertActions: \"LOOKUP\"},\n//      {resource: \"PartnerOrder\", path: \"Shipper\",    insertActions: \"LOOKUP\"}\n//    ];\n//    json = insertActions.insertActions(req, json, actions);  // API Server processes this...\n\ninsertActions.insertActions = function insertActions(req, json, actions) {\n    var dbTitle = \"InsertActions: \";\n    if (json === null) {\n        log.debug(dbTitle + \"null request object - no action\");\n        return json;\n    }\n    var jsonObj = null; // hold off on parse, until we are sure this resource is relevant\n\n    // for (let eachAction of actions) { -- syntax not supported\n    for each (var eachAction in actions) {\n        if (req.resourceName === eachAction.resource) {\n            if (jsonObj === null) {\n                jsonObj = JSON.parse(json);\n            }\n            if (eachAction.path === \"\") {\n                insertActionTag(jsonObj, eachAction.insertActions);  // root\n            }\n            else {\n                var paths = jsonPath(jsonObj, eachAction.path, {resultType:\"PATH\"});\n                log.debug(dbTitle + \"paths: \" + paths);  // ==>  [ $['Items'][0]['Product'] ...]\n                for each (var eachPath in paths) {       // perform insertion for eachPath\n                    var target = fixPathObject(eachPath.substring(1), jsonObj);\n                    insertActionTag(target, eachAction.insertActions);\n                }\n            }\n        }\n    }\n\n    if (jsonObj === null) {\n        log.debug(dbTitle + \"no change\");\n        return json;\n    }\n    else {\n        log.debug(dbTitle + \"transformed to: \" + JSON.stringify(jsonObj));\n        return JSON.stringify(jsonObj);\n    }\n};\n\n",
      "{f}jsonpath-0.8.0.json": {
        "name": "jsonpath",
        "version": "0.8.0",
        "isUsedByProject": false,
        "title": "JsonPathLib",
        "description": "This is a library",
        "groupName": "newlib",
        "docsURL": "",
        "referenceURL": ""
      },
      "{f}jsonpath-0.8.0.js": "/* JSONPath 0.8.0 - XPath for JSON\r\n *\r\n * Copyright (c) 2007 Stefan Goessner (goessner.net)\r\n * Licensed under the MIT (MIT-LICENSE.txt) licence.\r\n */\r\nfunction jsonPath(obj, expr, arg) {\r\n   var P = {\r\n      resultType: arg && arg.resultType || \"VALUE\",\r\n      result: [],\r\n      normalize: function(expr) {\r\n         var subx = [];\r\n         return expr.replace(/[\\['](\\??\\(.*?\\))[\\]']/g, function($0,$1){return \"[#\"+(subx.push($1)-1)+\"]\";})\r\n                    .replace(/'?\\.'?|\\['?/g, \";\")\r\n                    .replace(/;;;|;;/g, \";..;\")\r\n                    .replace(/;$|'?\\]|'$/g, \"\")\r\n                    .replace(/#([0-9]+)/g, function($0,$1){return subx[$1];});\r\n      },\r\n      asPath: function(path) {\r\n         var x = path.split(\";\"), p = \"$\";\r\n         for (var i=1,n=x.length; i<n; i++)\r\n            p += /^[0-9*]+$/.test(x[i]) ? (\"[\"+x[i]+\"]\") : (\"['\"+x[i]+\"']\");\r\n         return p;\r\n      },\r\n      store: function(p, v) {\r\n         if (p) P.result[P.result.length] = P.resultType == \"PATH\" ? P.asPath(p) : v;\r\n         return !!p;\r\n      },\r\n      trace: function(expr, val, path) {\r\n         if (expr) {\r\n            var x = expr.split(\";\"), loc = x.shift();\r\n            x = x.join(\";\");\r\n            if (val && val.hasOwnProperty(loc))\r\n               P.trace(x, val[loc], path + \";\" + loc);\r\n            else if (loc === \"*\")\r\n               P.walk(loc, x, val, path, function(m,l,x,v,p) { P.trace(m+\";\"+x,v,p); });\r\n            else if (loc === \"..\") {\r\n               P.trace(x, val, path);\r\n               P.walk(loc, x, val, path, function(m,l,x,v,p) { typeof v[m] === \"object\" && P.trace(\"..;\"+x,v[m],p+\";\"+m); });\r\n            }\r\n            else if (/,/.test(loc)) { // [name1,name2,...]\r\n               for (var s=loc.split(/'?,'?/),i=0,n=s.length; i<n; i++)\r\n                  P.trace(s[i]+\";\"+x, val, path);\r\n            }\r\n            else if (/^\\(.*?\\)$/.test(loc)) // [(expr)]\r\n               P.trace(P.eval(loc, val, path.substr(path.lastIndexOf(\";\")+1))+\";\"+x, val, path);\r\n            else if (/^\\?\\(.*?\\)$/.test(loc)) // [?(expr)]\r\n               P.walk(loc, x, val, path, function(m,l,x,v,p) { if (P.eval(l.replace(/^\\?\\((.*?)\\)$/,\"$1\"),v[m],m)) P.trace(m+\";\"+x,v,p); });\r\n            else if (/^(-?[0-9]*):(-?[0-9]*):?([0-9]*)$/.test(loc)) // [start:end:step]  phyton slice syntax\r\n               P.slice(loc, x, val, path);\r\n         }\r\n         else\r\n            P.store(path, val);\r\n      },\r\n      walk: function(loc, expr, val, path, f) {\r\n         if (val instanceof Array) {\r\n            for (var i=0,n=val.length; i<n; i++)\r\n               if (i in val)\r\n                  f(i,loc,expr,val,path);\r\n         }\r\n         else if (typeof val === \"object\") {\r\n            for (var m in val)\r\n               if (val.hasOwnProperty(m))\r\n                  f(m,loc,expr,val,path);\r\n         }\r\n      },\r\n      slice: function(loc, expr, val, path) {\r\n         if (val instanceof Array) {\r\n            var len=val.length, start=0, end=len, step=1;\r\n            loc.replace(/^(-?[0-9]*):(-?[0-9]*):?(-?[0-9]*)$/g, function($0,$1,$2,$3){start=parseInt($1||start);end=parseInt($2||end);step=parseInt($3||step);});\r\n            start = (start < 0) ? Math.max(0,start+len) : Math.min(len,start);\r\n            end   = (end < 0)   ? Math.max(0,end+len)   : Math.min(len,end);\r\n            for (var i=start; i<end; i+=step)\r\n               P.trace(i+\";\"+expr, val, path);\r\n         }\r\n      },\r\n      eval: function(x, _v, _vname) {\r\n         try { return $ && _v && eval(x.replace(/@/g, \"_v\")); }\r\n         catch(e) { throw new SyntaxError(\"jsonPath: \" + e.message + \": \" + x.replace(/@/g, \"_v\").replace(/\\^/g, \"_a\")); }\r\n      }\r\n   };\r\n\r\n   var $ = obj;\r\n   if (expr && obj && (P.resultType == \"VALUE\" || P.resultType == \"PATH\")) {\r\n      P.trace(P.normalize(expr).replace(/^\\$;/,\"\"), obj, \"$\");\r\n      return P.result.length ? P.result : false;\r\n   }\r\n} \r\n",
      "{f}newlib-1.0.json": {
        "name": "newlib",
        "version": "1.0",
        "isUsedByProject": false,
        "title": "New library",
        "description": "This is a library",
        "groupName": "newlib",
        "docsURL": "",
        "referenceURL": ""
      },
      "{f}newlib-1.0.js": null
    },
    "{d}request_events": {
      "{f}ReadMe.md": "This folder contains definitions for request events",
      "{f}OptionsEvent.json": {
        "name": "OptionsEvent",
        "eventType": "options",
        "comments": null,
        "isActive": true
      },
      "{f}OptionsEvent.js": "// Get the full URL of the resource.\nvar url = req.fullBaseURL;\nvar domain = url.replace(\"http://\",\"\").replace(\"https://\",\"\").split(/[/?#]/)[0];\n// Allow Origin only from baseURL of the resource.\nvar corsResponseObject = {\n    \"Access-Control-Allow-Methods\" : \"GET,OPTIONS,POST,PUT\",\n    \"Access-Control-Allow-Origin\" : \"http://\"+domain,\n    \"Access-Control-Allow-Headers\" : \"authorization,content-type, accept\",\n    \"Access-Control-Max-Age\" : 2400 ,\n    \"HTTPStatusCode\" : 200\n};\n\nif(req.resourceName === 'demo:PurchaseOrder')\n{\n    // Restrict access of demo:PurchaseOrder to calls from the same domain\n    return corsResponseObject;\n}\nelse{\n    // For the other resources, allow access from all origins.\n    corsResponseObject[\"Access-Control-Allow-Methods\"] = \"GET,POST,OPTIONS\";\n    corsResponseObject[\"Access-Control-Allow-Origin\"] = \"*\";\n    return corsResponseObject;\n}\n\n",
      "{f}RequestEvent.json": {
        "name": "RequestEvent",
        "eventType": "request",
        "comments": "comments",
        "isActive": true
      },
      "{f}RequestEvent.js": "// Requires insertActions.js & jsonpath-0.8.0.js, from B2B example quick install\nvar actions = [\n    { resource: \"PartnerOrder\", path: \"$..Product\", insertActions: \"LOOKUP\" },\n    { resource: \"PartnerOrder\", path: \"Shipper\",    insertActions: \"LOOKUP\" },\n    { resource: \"SupplierSelfService\", path: \"\",    insertActions: \"MERGE_INSERT\" }\n];\njson = insertActions.insertActions(req, json, actions);  // API Server processes this...\n\n",
      "{f}ResponseEvent.json": {
        "name": "ResponseEvent",
        "eventType": "response",
        "comments": "comments",
        "isActive": true
      },
      "{f}ResponseEvent.js": "var reqResourceName = req.resourceName;\nif (\"POST\" == req.verb && \"PartnerOrder\" == reqResourceName) {\n  delete json.txsummary;  // remove from response\n  delete json.rulesummary;\n  var reqJson = JSON.parse(req.json);  // convert req's JSON string to JSON objects\n  var custName = reqJson.customer;     // get the name from the request (e.g., 'Max Air')\n  var options = { filter: \"\\\"name\\\" = '\" + custName + \"'\" };\n  // so.. http://localhost:8080/rest/default/sample/v1/cust?filter=\"name\"='Max Air'\n  var custAccount = SysUtility.getResourceAsString(\"cust\", options);  // get resource JSON\n  log.debug(\"***return account summary as response: \" + custAccount);\n  json.accountSummary = JSON.parse(custAccount);  // inject into response\n}\n\n"
    },
    "{d}resources": {
      "{f}ReadMe.md": "This folder contains definitions for resources",
      "{f}apiversions.json": {
        "v1": {
          "name": "v1",
          "comments": null
        },
        "v2": {
          "name": "v2",
          "comments": null
        }
      },
      "{d}v1": {
        "{d}AllCustomers": {
          "{f}AllCustomers.json": {
            "name": "AllCustomers",
            "description": "Query for all customers",
            "siblingRank": 100,
            "resourceType": "TableBased",
            "prefix": "demo",
            "entity": "customer",
            "isCollection": true,
            "isCombined": false,
            "filter": null,
            "order": null,
            "useSchemaAttributes": false,
            "attributes": [
              {
                "attribute": "balance",
                "alias": "balance",
                "description": "",
                "isKey": false
              },
              {
                "attribute": "name",
                "alias": "name",
                "description": "",
                "isKey": false
              }
            ]
          },
          "{f}AllCustomers.js": null
        },
        "{d}demo_FreeSQL": {
          "{f}demo_FreeSQL.json": {
            "name": "demo_FreeSQL",
            "description": null,
            "siblingRank": 100,
            "resourceType": "FreeSQL",
            "prefix": "demo",
            "isCollection": true
          },
          "{f}demo_FreeSQL.sql": "-- your SQL query goes here\n-- bacwk rkgfc ...\n",
          "{f}demo_FreeSQL.js": null
        },
        "{d}JavaScript_test": {
          "{f}JavaScript_test.json": {
            "name": "JavaScript_test",
            "description": null,
            "siblingRank": 100,
            "resourceType": "JavaScript",
            "isCollection": true,
            "joinCondition": null
          },
          "{f}JavaScript_test.js": "var result = {\n    result: \"Hello, world!\",\n    String: \"bjdkduhcrs\",\n    Number: 516.4085272598078,\n    \"Null value\": null\n};\nreturn result;\n"
        },
        "{d}MongoDB_test": {
          "{f}MongoDB_test.json": {
            "name": "MongoDB_test",
            "description": null,
            "siblingRank": 100,
            "resourceType": "MongoDB",
            "isCollection": true,
            "server": null,
            "databaseName": null,
            "databaseUser": null,
            "databasePassword": null,
            "collectionName": null,
            "attachPath": null,
            "keys": null,
            "filter": null,
            "order": null
          }
        }
      },
      "{d}v2": {
        "{d}demo_FreeSQL": {
          "{f}demo_FreeSQL.json": {
            "name": "demo_FreeSQL",
            "description": null,
            "siblingRank": 100,
            "resourceType": "FreeSQL",
            "prefix": "demo",
            "isCollection": true
          },
          "{f}demo_FreeSQL.sql": "-- your SQL query goes here\n-- bacwk rkgfc ...\n",
          "{f}demo_FreeSQL.js": null
        },
        "{d}JavaScript_test": {
          "{f}JavaScript_test.json": {
            "name": "JavaScript_test",
            "description": null,
            "siblingRank": 100,
            "resourceType": "JavaScript",
            "isCollection": true,
            "joinCondition": null
          },
          "{f}JavaScript_test.js": "var result = {\n    result: \"Hello, world!\",\n    String: \"bjdkduhcrs\",\n    Number: 516.4085272598078,\n    \"Null value\": null\n};\nreturn result;\n"
        },
        "{d}MongoDB_test": {
          "{f}MongoDB_test.json": {
            "name": "MongoDB_test",
            "description": null,
            "siblingRank": 100,
            "resourceType": "MongoDB",
            "isCollection": true,
            "server": null,
            "databaseName": null,
            "databaseUser": null,
            "databasePassword": null,
            "collectionName": null,
            "attachPath": null,
            "keys": null,
            "filter": null,
            "order": null
          }
        }
      }
    },
    "{d}rules": {
      "{f}ReadMe.md": "This folder contains definitions for rules",
      "{d}demo": {
        "{f}ReadMe.md": "Rules for entities in prefix demo",
        "{d}customer": {
          "{f}event_twddm.json": {
            "name": "event_twddm",
            "entity": "customer",
            "isActive": false,
            "ruleType": "event",
            "asynchronous": false,
            "appliesTo": {
              "insert": true,
              "update": true,
              "delete": false
            },
            "codeType": "JavaScript",
            "isAutoTitle": false,
            "title": "Lookup city and state from zip code",
            "comments": null,
            "topics": [
            ]
          },
          "{f}event_twddm.js": "var detail = {\n        filter: \"{_id: \\\"32751\\\"}\" ,\n        order: \"\",\n        pagesize: 30,\n        offset: 0,\n        verbose: false\n};\n\nvar response =  SysUtility.getResource('zipcodes', detail);\nlog.debug(JSON.stringify(response,null,2));\nlog.debug(response[0].state);\nlog.debug(response[0].city);\n//log.debug(response[0].loc);",
          "{f}sum_balance.json": {
            "name": "sum_balance",
            "entity": "customer",
            "isActive": true,
            "ruleType": "sum",
            "attribute": "balance",
            "roleToChildren": "PurchaseOrderList",
            "childAttribute": "amount_total",
            "qualification": "paid = false",
            "isJIT": false,
            "isAutoTitle": true,
            "title": "balance = sum(PurchaseOrderList.amount_total where paid = false)",
            "comments": "A rule is like a spreadsheet cell formula... it *reacts\" to changes in referenced data...\n* increased when order placed\n* decreased when order deleted... or paid\n* adjusted when order changed... or assigned to a new customer",
            "topics": [
              "Check Credit"
            ]
          },
          "{f}validation_stgcq.json": {
            "name": "validation_stgcq",
            "entity": "customer",
            "isActive": true,
            "ruleType": "validation",
            "codeType": "JavaScript",
            "errorMessage": "Customer {name}'s balance: {balance|#,##0.00} exceeds their credit limit: {credit_limit|#,##0.00}",
            "problemAttributes": [
            ],
            "isAutoTitle": true,
            "title": "Validation: return row.balance <= row.credit_limit;",
            "comments": "balance cannot exceed credit limit, else throw exception",
            "topics": [
              "Check Credit"
            ]
          },
          "{f}validation_stgcq.js": "return row.balance <= row.credit_limit;\n"
        },
        "{d}LineItem": {
          "{f}formula_amount.json": {
            "name": "formula_amount",
            "entity": "LineItem",
            "isActive": true,
            "ruleType": "formula",
            "attribute": "amount",
            "codeType": "JavaScript",
            "isJIT": false,
            "isAutoTitle": false,
            "title": "Discounted price*qty",
            "comments": "Reactive Logic is expressed in JavaScript, so you use...\n- conditional logic (as above),\n- standard JavaScript services (e.g., moment date functions - enable in Project > Libraries),\n- SQL / external services.... whatever is required.",
            "topics": [
              "Check Credit"
            ]
          },
          "{f}formula_amount.js": "if (row.qty_ordered <= 6)  // discount (using conditional JavaScript logic)\n   return row.product_price * row.qty_ordered;\nelse\n   return row.product_price * row.qty_ordered * 0.8;\n",
          "{f}parentCopy_product_price.json": {
            "name": "parentCopy_product_price",
            "entity": "LineItem",
            "isActive": true,
            "ruleType": "parentCopy",
            "attribute": "product_price",
            "roleToParent": "product",
            "parentAttribute": "price",
            "isAutoTitle": true,
            "title": "product_price = parentcopy(product.price)",
            "comments": "Parent copy means order unaffected by product price changes",
            "topics": [
              "Check Credit"
            ]
          }
        },
        "{d}PurchaseOrder": {
          "{f}event_aqgkk.json": {
            "name": "event_aqgkk",
            "entity": "PurchaseOrder",
            "isActive": true,
            "ruleType": "event",
            "asynchronous": false,
            "appliesTo": {
              "insert": false,
              "update": true,
              "delete": false
            },
            "codeType": "JavaScript",
            "isAutoTitle": false,
            "title": "Audit Purchase Order amount changes",
            "comments": "row, logicContext passed in from engine; initialVerb is *client* action (e.g., POST), irrespective of subsequent updates (e.g., from item adjustments)\nearly events execute before reactive expressions, events execute after reactive expressions, commit events execute after all rows are processed",
            "topics": [
              "Audit Orders"
            ]
          },
          "{f}event_aqgkk.js": "if (row.amount_total != oldRow.amount_total) {\n  var newPurchaseorder_audit = logicContext.createPersistentBean(\"purchaseorder_audit\");\n  newPurchaseorder_audit.amount_total = oldRow.amount_total;  // set attributes from old values\n  newPurchaseorder_audit.paid = oldRow.paid;\n  newPurchaseorder_audit.customer_name = oldRow.customer_name;\n  newPurchaseorder_audit.order_number = oldRow.order_number;  // set the foreign key\n  logicContext.insert(newPurchaseorder_audit);                // saves (fires logic)\n}\n// better: re-use alternative using Loadable Libraries\n// if (row.amount_total != oldRow.amount_total)\n//   SysLogic.insertChildFrom(\"purchaseorder_audit\", logicContext);",
          "{f}sum_amount_total.json": {
            "name": "sum_amount_total",
            "entity": "PurchaseOrder",
            "isActive": true,
            "ruleType": "sum",
            "attribute": "amount_total",
            "roleToChildren": "LineItemList",
            "childAttribute": "amount",
            "qualification": null,
            "isJIT": false,
            "isAutoTitle": true,
            "title": "amount_total = sum(LineItemList.amount)",
            "comments": "sum of line item amounts",
            "topics": [
              "Check Credit"
            ]
          }
        }
      },
      "{d}finance": {
        "{f}ReadMe.md": "Rules for entities in prefix finance"
      }
    },
    "{d}security": {
      "{f}ReadMe.md": "This folder contains definitions for security",
      "{d}authtokens": {
        "{f}ReadMe.md": "This contains statically defined API Keys (Auth Tokens) for this project.\nDynamically created keys (using @authentication service) are NOT affected by these.",
        "{f}Admin key.json": {
          "name": "Admin key",
          "authToken": "rqqquPmHAKVcIx2edeYo",
          "description": "Created as part of this API. Feel free to change or delete this auth token.",
          "userIdentifier": null,
          "isActive": true,
          "expiration": null,
          "logging": "*=FINE",
          "roles": [
            "Full access"
          ],
          "globals": {
          }
        }
      },
      "{d}roles": {
        "{f}ReadMe.md": "This contains Roles defined for the project.\nRoles define which server features are available and what the permissions\non each feature is enabled.",
        "{f}API Documentation.json": {
          "name": "API Documentation",
          "description": "This role is special and is used when generating OpenAPI(Swagger) documentation. It is recognized by the name special name 'API Documentation' and used only for documentation calls.\n Any Resources, Tables, Views, Procedures etc. that are defined and enabled by this role are used to generate the OpenAPI(Swagger) documentation.\n If this role is assigned to a user it will NOT be used for execution permissions.\n If this role is removed or otherwise unavailable, the Swagger/OpenAPI documentation will be nothing more that a name and version.",
          "defaultTablePermission": "A",
          "defaultViewPermission": "A",
          "globals": {
          },
          "apiVisibility": {
            "table": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "view": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "resource": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "procedure": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "metatable": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "function": {
              "isRestricted": false,
              "restrictedTo": null
            }
          },
          "entityPermission": {
          },
          "functionPermission": null
        },
        "{f}Full access.json": {
          "name": "Full access",
          "description": "Full access to everything in this project",
          "defaultTablePermission": "A",
          "defaultViewPermission": "A",
          "globals": {
          },
          "apiVisibility": {
            "table": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "view": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "resource": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "procedure": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "metatable": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "function": {
              "isRestricted": false,
              "restrictedTo": null
            }
          },
          "entityPermission": {
          },
          "functionPermission": null
        },
        "{f}Read only.json": {
          "name": "Read only",
          "description": "Read-only access to everything in this project",
          "defaultTablePermission": "R",
          "defaultViewPermission": "R",
          "globals": {
          },
          "apiVisibility": {
            "table": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "view": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "resource": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "procedure": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "metatable": {
              "isRestricted": false,
              "restrictedTo": null
            },
            "function": {
              "isRestricted": false,
              "restrictedTo": null
            }
          },
          "entityPermission": {
          },
          "functionPermission": null
        }
      },
      "{d}users": {
        "{f}ReadMe.md": "This contains Users defined for the system when using the default authentication provider.\nWhile this can be used for production systems, typically the authentication provider is LDAP\nor some other mechanism.",
        "{f}admin.json": {
          "name": "admin",
          "fullname": "Demo user (admin)",
          "email": "admin@ca.com",
          "isActive": true,
          "comments": null,
          "keyLifetimeSeconds": null,
          "passwordHash": "PLmlCM4B9Ou2+XwyB1bbJMH49JVj6dGS23vzAdM9ZdgDJfjUsQ9eDJVbfGmjf+x9jXda7Ia6SdTTIsY055gXJw==",
          "passwordSalt": "+bMg++4KIpNDvQhFRAXsznr2rePGRm2vwi8YQLPP",
          "roles": [
            "API Owner"
          ],
          "globals": {
          }
        },
        "{f}demo.json": {
          "name": "demo",
          "fullname": "Demo user",
          "email": "admin@ca.com",
          "isActive": true,
          "comments": null,
          "keyLifetimeSeconds": null,
          "passwordHash": "LFU36oBGQH+NFVnh8+C5krrxv1PXI/qLgrzUKcIFNmWstXuZBTrf0J1A7elXKNHsRXLlS64D16LLH4EDL14jYA==",
          "passwordSalt": "g73tldjG/jfnWmi2jfv5uAVpZu2oSxLB2DZIs7IM",
          "roles": [
            "API Owner"
          ],
          "globals": {
            "area": "SriLanka",
            "region": "SouthAsia"
          }
        },
        "{f}guest.json": {
          "name": "guest",
          "fullname": "Guest Account with read-only access",
          "email": null,
          "isActive": true,
          "comments": null,
          "keyLifetimeSeconds": null,
          "passwordHash": "uT+dkjlnSO5x9NLTboWNcHe/7ugpdfs92e7S7+nuWbr5DFJya7ByMU5lyuWYbjmELeHB41+NN+j7U2B0oiObaA==",
          "passwordSalt": "gVj+ko/x9icIxoEsS4intH3RIkeR1c79tERscyAT",
          "roles": [
            "Read only"
          ],
          "globals": {
          }
        }
      }
    },
    "{d}sorts": {
      "{f}ReadMe.md": "This folder contains definitions for sorts",
      "{f}UserSort.json": {
        "name": "UserSort",
        "description": "descr",
        "isRestricted": true,
        "appliesTo": [
          "customer"
        ]
      },
      "{f}UserSort.sql": "name desc"
    },
    "{d}timers": {
      "{f}ReadMe.md": "This folder contains definitions for timers",
      "{f}New Timer.json": {
        "name": "New Timer",
        "startTimestampOffset": null,
        "endTimestampOffset": null,
        "isNoOverlap": true,
        "isActive": false,
        "isSingleServer": false,
        "crontab": "/15 * * * * ? *",
        "isLogErrorOnly": false,
        "loggingLevel": "Fine"
      },
      "{f}New Timer.js": "// Timer code goes here\nlog.debug(\"My timer has executed!\");\n"
    },
    "{d}topics": {
      "{f}ReadMe.md": "This folder contains definitions for topics",
      "{f}Audit Orders.json": {
        "name": "Audit Orders",
        "color": "#00fcee",
        "summary": "If amount changes"
      },
      "{f}Audit Orders.html": "<p>This examples illustrates that your logic is a combination of Reactive Programming Rules, and JavaScript.</p>\n\n<p>Note your JavaScript can use LIbraries of Java/JavaScript code. &nbsp;Upload these to your project in Project properties.</p>\n\n<p>&nbsp;</p>\n",
      "{f}Check Credit.json": {
        "name": "Check Credit",
        "color": "#96f90d",
        "summary": "Ensure the balance does not exceed the credit limit."
      },
      "{f}Check Credit.html": "<h2>Business Context</h2>\n\n<p>Story: <strong>Place Order.</strong> &nbsp;</p>\n\n<p>Task/Requirement: <strong>Check Credit.</strong>&nbsp;&nbsp;(or, your methodology / terminology).</p>\n\n<p>&nbsp;</p>\n\n<h2>Business view</h2>\n\n<p>When placing&nbsp;an order, <em>check credit</em> - elaborated as follows (the <cite>&quot;cocktail napkin spec&quot;</cite>)...&nbsp;</p>\n\n<ul>\n\t<li>the Balance must be less than or equal to the Credit Limit, where... &nbsp;(step-wise definition of terms)</li>\n\t<li>the Balance is the sum of the unpaid Order Amount Totals, where...</li>\n\t<li>the Amount Total is the sum of the LineItem Amounts, where...</li>\n\t<li>the Amount is the discounted Price * Quantity, where...</li>\n\t<li>the Price is obtained from the Product</li>\n</ul>\n\n<p>A good spec - clear, concise.</p>\n\n<p>&nbsp;</p>\n\n<hr />\n<h2>Conventional Design</h2>\n\n<p>In a conventional approach, you might design the following <strong>pseudocode</strong>:</p>\n\n<ol>\n\t<li>Compute the LineItem.amount\n\t<ol>\n\t\t<li>Read the Product to get the Price</li>\n\t\t<li>Multiply by qty_ordered to compute the amount</li>\n\t</ol>\n\t</li>\n\t<li>Update the PurchaseOrder.amount_total\n\t<ol>\n\t\t<li>Read the PurchaseOrder</li>\n\t\t<li>Increase the amount_total</li>\n\t\t<li>Update the PurchaseOrder (to cache)</li>\n\t</ol>\n\t</li>\n\t<li>Update the Customer.balance\n\t<ol>\n\t\t<li>Read the Customer,</li>\n\t\t<li>Increase the balance</li>\n\t\t<li>Update the Customer (to cache)</li>\n\t</ol>\n\t</li>\n\t<li>Check that&nbsp;balance &lt;= credit_limit\n\t<ol>\n\t\t<li>Throw exception with error message for UI handling</li>\n\t\t<li>Rollback the transaction</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p>But Place Order is&nbsp;<em><strong>just one Story</strong>.</em>&nbsp;&nbsp;We need analogous logic for <em>all the related</em> Stories (Detete Order, Pay Order, etc etc).</p>\n\n<p>&nbsp;</p>\n\n<hr />\n<h2>Reactive Rule Approach</h2>\n\n<p>And that&#39;s the power of declarative reactive logic. &nbsp;You simply state the rules below (nearly the same as the cocktail napkin).</p>\n\n<p>&nbsp;</p>\n\n<h2>Reactive Rule Execution: Watch, React and&nbsp;Chain</h2>\n\n<p>And (as in a spreadsheet), the rules&nbsp;are <em>automatically</em> applied to all incoming transactions:</p>\n\n<ol>\n\t<li>They <strong><em>watch</em></strong>&nbsp;for changes in data referenced by rules</li>\n\t<li>They&nbsp;<em><strong>react</strong></em>&nbsp;to changes in referenced data. &nbsp;Execution order is dictated by dependencies. &nbsp;</li>\n\t<li>They&nbsp;<em><strong>chain</strong></em>&nbsp;- including across tables. &nbsp;So changes to line items affect their order, which affect their customer</li>\n</ol>\n\n<p>Note it works across tables. &nbsp;Consider&nbsp;the customer balance - the sum of the unpaid order amounts.<br />\nIt works rather like a spreadsheet. &nbsp;Order changes are watched, and the balance is</p>\n\n<ul>\n\t<li>increased when order inserted</li>\n\t<li>decreased when order deleted... or paid</li>\n\t<li>adjusted when the order amount total is changed... or assigned to a new customer... or the line items are altered</li>\n</ul>\n\n<p>Observe persistence is automated (no need to read/write the customer, or deal with transactions). &nbsp;And it&#39;s optimized:</p>\n\n<ul>\n\t<li>adjustments are 1 row updates, not select sum queries</li>\n\t<li>sql is averted if the watched data is not changed</li>\n\t<li>caching is provided (inserting multiple line items results in just 1 adjustment to order and customer)</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<hr />\n<h2>Bottom Line</h2>\n\n<p>That means the following Stories are&nbsp;<em>automatically</em>&nbsp;addressed with our 5 &quot;cocktail napkin&quot;&nbsp;rules:</p>\n\n<ul>\n\t<li>Delete Order - the balance is reduced</li>\n\t<li>Pay Order - the balance is reduced</li>\n\t<li>UnPay the Order - balance is increased</li>\n\t<li>Reassign Order to a new customer - new customer balance increased, old balance decreased (for unpaid Orders)</li>\n\t<li>Reassign a Line Item to a different Product - adjusts the order&#39;s amount total</li>\n\t<li>Add a Line Item</li>\n\t<li>Delete a Line Item</li>\n\t<li>Change Line Item Quantity</li>\n\t<li>Reassign Product to Line Item</li>\n\t<li>Do <em>multiple</em> of these, in combination (&quot;no, 2 hammers, not 1 shovel&quot;)</li>\n</ul>\n\n<p>A conventional approach would require hundreds of lines of code, might easily miss corner cases, and be tedious to maintain.</p>\n\n<p>&nbsp;</p>\n"
    },
    "{f}apioptions.json": {
      "Aggregate Default Override": {
        "dataType": "boolean",
        "value": false,
        "defaultValue": false
      },
      "Allow Swagger without authentication": {
        "dataType": "boolean",
        "value": true,
        "defaultValue": false
      },
      "Audit User Transactions": {
        "dataType": "boolean",
        "value": false,
        "defaultValue": false
      },
      "Binary Output Encoding": {
        "dataType": "enum",
        "value": "base64",
        "defaultValue": "hex"
      },
      "Checksum Size Limit": {
        "dataType": "integer",
        "value": 2000,
        "defaultValue": 2000
      },
      "Chunk Size Default": {
        "dataType": "integer",
        "value": 20,
        "defaultValue": 20
      },
      "Default response format": {
        "dataType": "enum",
        "value": "json",
        "defaultValue": "json"
      },
      "Disallow free-form filters and sorts": {
        "dataType": "boolean",
        "value": false,
        "defaultValue": false
      },
      "Enable HTTP Basic Authentication": {
        "dataType": "boolean",
        "value": true,
        "defaultValue": true
      },
      "Force Binary Data as an Object": {
        "dataType": "boolean",
        "value": true,
        "defaultValue": false
      },
      "Force Consistent Pagination when no primary key": {
        "dataType": "boolean",
        "value": false,
        "defaultValue": false
      },
      "HTTPS only": {
        "dataType": "boolean",
        "value": false,
        "defaultValue": false
      },
      "Inline Limit Default": {
        "dataType": "integer",
        "value": 6000,
        "defaultValue": 2000
      },
      "JSON NaN (Quiet)": {
        "dataType": "string",
        "value": "null",
        "defaultValue": "null"
      },
      "JSON NaN (Signaling)": {
        "dataType": "string",
        "value": "null",
        "defaultValue": "null"
      },
      "JSON Negative Infinity": {
        "dataType": "string",
        "value": "null",
        "defaultValue": "null"
      },
      "JSON Positive Infinity": {
        "dataType": "string",
        "value": "null",
        "defaultValue": "null"
      },
      "Maximum Page Size": {
        "dataType": "integer",
        "value": 5000,
        "defaultValue": 5000
      },
      "Metadata name": {
        "dataType": "string",
        "value": "@metadata",
        "defaultValue": "@metadata"
      },
      "Page Size Default": {
        "dataType": "integer",
        "value": 20,
        "defaultValue": 20
      },
      "Permit Authorization parameter in URL": {
        "dataType": "boolean",
        "value": true,
        "defaultValue": false
      },
      "Provide detailed security debugging": {
        "dataType": "enum",
        "value": "0",
        "defaultValue": "0"
      },
      "Realm for HTTP Basic Authentication": {
        "dataType": "string",
        "value": null,
        "defaultValue": null
      },
      "Stored Procedure Inline Limit": {
        "dataType": "integer",
        "value": 2000,
        "defaultValue": 2000
      },
      "Stored Procedure Row Limit": {
        "dataType": "integer",
        "value": 100,
        "defaultValue": 100
      },
      "Tech docs URL": {
        "dataType": "string",
        "value": "http://ca-doc.espressologic.com/docs/tutorial/business-logic-demo",
        "defaultValue": null
      },
      "Type base URI": {
        "dataType": "string",
        "value": "urn:caliveapicreator:examples:demo:",
        "defaultValue": "urn:caliveapicreator:"
      },
      "User docs URL": {
        "dataType": "string",
        "value": null,
        "defaultValue": null
      },
      "XML Document Root Element Tag Name": {
        "dataType": "string",
        "value": "root",
        "defaultValue": "root"
      }
    },
    "{f}project.json": {
      "name": "Full Project for Testing",
      "urlFragment": "test",
      "comments": "This is a sample project with 1 of everything",
      "isEnabled": true,
      "authProviderName": "Built-in authentication"
    },
    "{f}exportoptions.json": {
      "passwordStyle": "SKIP"
    }
  }
}